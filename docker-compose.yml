version: '3.7'

services:
    sentry-redis:
        image: redis:${REDIS_VERSION}
        container_name: sentry-redis
        hostname: sentry-redis
        restart: always
        networks:
            - sentry
        volumes:
            - ${PWD}/data/sentry/redis/data:/data

    sentry-postgres:
        image: postgres:${POSTGRES_VERSION}
        container_name: sentry-postgres
        hostname: sentry-postgres
        restart: always
        environment:
            POSTGRES_USER: ${SENTRY_DB_USER}
            POSTGRES_PASSWORD: ${SENTRY_DB_PASSWORD}
            POSTGRES_DB: ${SENTRY_DB_NAME}
        networks:
            - sentry
        volumes:
            - ${PWD}/data/sentry/postgres:/var/lib/postgresql/data

    sentry-base:
        image: sentry:${SENTRY_VERSION}
        container_name: sentry-base
        hostname: sentry-base
        restart: always
        ports:
            - ${SENTRY_PORT:-8099}:9000
        env_file:
            - .env
        depends_on:
            - sentry-redis
            - sentry-postgres
        networks:
            - sentry
        volumes:
            - './data/sentry/sentry:/var/lib/sentry/files'

    sentry-cron:
        image: sentry:${SENTRY_VERSION}
        container_name: sentry-cron
        hostname: sentry-cron
        restart: always
        env_file:
            - .env
        depends_on:
            - sentry-redis
            - sentry-postgres
        command: "sentry run cron"
        networks:
            - sentry
        volumes:
            - ${PWD}/data/sentry/sentry:/var/lib/sentry/files

    sentry-worker:
        image: sentry:${SENTRY_VERSION}
        container_name: sentry-worker
        hostname: sentry-worker
        restart: always
        env_file:
            - .env
        depends_on:
            - sentry-redis
            - sentry-postgres
        command: "sentry run worker"
        networks:
            - sentry
        volumes:
            - ${PWD}/data/sentry/sentry:/var/lib/sentry/files

networks:
    sentry:
        driver: bridge